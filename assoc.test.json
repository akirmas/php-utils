{
  "$schema": "../test/test.schema.json",
  "fillValues": {
    "fn": "\\assoc\\fillValues",
    "in": [
      {"a": {"b": "{c}"}, "b": "{c}"},
      {"c": 1}
    ],
    "out": {"a": {"b": 1}, "b": 1},
    "assert": "equal"
  },
  "assoc2table --delimiter null": {
    "fn": "\\assoc\\assoc2table",
    "in": [
      {"a:b": "c", "a": {"b": "c"}}
    ],
    "assert": "equal",
    "out": [
      ["a:b", "c"],
      ["a", "b", "c"]
    ]
  },
  "assoc2table --delimiter :": {
    "fn": "\\assoc\\assoc2table",
    "in": [
      {"a:b": "c", "a": {"b": "c"}},
      ":"
    ],
    "assert": "equal",
    "out": [
      ["a", "b", "c"],
      ["a", "b", "c"]
    ]
  },  
  "mapKeys: ordinary": {
    "fn": "\\assoc\\mapKeys",
    "in": [
      {"a:b": 1, "c:d" : 2},
      {"a:b": "c:d"}
    ],
    "assert": "equal",
    "out": {
      "c:d": 1
    }
  },
  "mapKeys: ordinary monads": {
    "fn": "\\assoc\\mapKeys",
    "in": [
      {"a:b": 1, "c:d" : 2},
      {"a:b": "c:d::base64Encode"}
    ],
    "assert": "equal",
    "out": {
      "c:d": "MQ=="
    }
  },
  "mapKeys: flip": {
    "fn": "\\assoc\\mapKeys",
    "in": [
      {"a:b": 1, "c:d" : 2},
      {"a:b": "c:d"},
      true
    ],
    "assert": "equal",
    "out": {
      "a:b": 2
    }
  },  
  "formatString": {
    "fn": "\\assoc\\formatString",
    "in": [
      "{entity:name}",
      {
        "entity:name": "CCrmLead",
        "products": [
          {"quantity":"1","name":"DERMA ROLLER","price":"150","currency":"ILS"},
          {"quantity":"1","name":"DERMA ROLLER","price":"150","currency":"ILS"}
        ]
      }
    ],
    "assert": "equal",
    "out": "CCrmLead"
  },
  "repairIndexesRecursive": {
    "fn": "\\assoc\\repairIndexesRecursive",
    "in": [{
      "1": {
        "1": "d",
        "0": "c"
      },
      "0": {
        "1": "b",
        "0": "a"
      }
    }],
    "assert": "equal",
    "out": [["a", "b"], ["c", "d"]]
  },
  "repairIndexes": {
    "fn": "\\assoc\\repairIndexes",
    "in": [{
      "1": "a",
      "0": "b"
    }],
    "assert": "equal",
    "out": ["b", "a"]
  },
  "splitKeys": {
    "fn": "\\assoc\\splitKeys",
    "in": [{
      "a:b": {
        "c:d": "e:f",
        "x:y": "0:1"
      } 
    }],
    "assert": "equal",
    "out": {
      "a": {
        "b": {
          "c": {
            "d": "e:f"
          },
          "x": {
            "y": "0:1"
          }
        }
      }
    }
  }
}